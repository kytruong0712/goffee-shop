// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuItem is an object representing the database table.
type MenuItem struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CategoryID  int64     `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *menuItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuItemColumns = struct {
	ID          string
	CategoryID  string
	Name        string
	Description string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	CategoryID:  "category_id",
	Name:        "name",
	Description: "description",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var MenuItemTableColumns = struct {
	ID          string
	CategoryID  string
	Name        string
	Description string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "menu_items.id",
	CategoryID:  "menu_items.category_id",
	Name:        "menu_items.name",
	Description: "menu_items.description",
	Status:      "menu_items.status",
	CreatedAt:   "menu_items.created_at",
	UpdatedAt:   "menu_items.updated_at",
}

// Generated where

var MenuItemWhere = struct {
	ID          whereHelperint64
	CategoryID  whereHelperint64
	Name        whereHelperstring
	Description whereHelperstring
	Status      whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"menu_items\".\"id\""},
	CategoryID:  whereHelperint64{field: "\"menu_items\".\"category_id\""},
	Name:        whereHelperstring{field: "\"menu_items\".\"name\""},
	Description: whereHelperstring{field: "\"menu_items\".\"description\""},
	Status:      whereHelperstring{field: "\"menu_items\".\"status\""},
	CreatedAt:   whereHelpertime_Time{field: "\"menu_items\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"menu_items\".\"updated_at\""},
}

// MenuItemRels is where relationship names are stored.
var MenuItemRels = struct {
	Category        string
	MenuItemOptions string
	MenuItemPrices  string
}{
	Category:        "Category",
	MenuItemOptions: "MenuItemOptions",
	MenuItemPrices:  "MenuItemPrices",
}

// menuItemR is where relationships are stored.
type menuItemR struct {
	Category        *Category           `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	MenuItemOptions MenuItemOptionSlice `boil:"MenuItemOptions" json:"MenuItemOptions" toml:"MenuItemOptions" yaml:"MenuItemOptions"`
	MenuItemPrices  MenuItemPriceSlice  `boil:"MenuItemPrices" json:"MenuItemPrices" toml:"MenuItemPrices" yaml:"MenuItemPrices"`
}

// NewStruct creates a new relationship struct
func (*menuItemR) NewStruct() *menuItemR {
	return &menuItemR{}
}

func (r *menuItemR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *menuItemR) GetMenuItemOptions() MenuItemOptionSlice {
	if r == nil {
		return nil
	}
	return r.MenuItemOptions
}

func (r *menuItemR) GetMenuItemPrices() MenuItemPriceSlice {
	if r == nil {
		return nil
	}
	return r.MenuItemPrices
}

// menuItemL is where Load methods for each relationship are stored.
type menuItemL struct{}

var (
	menuItemAllColumns            = []string{"id", "category_id", "name", "description", "status", "created_at", "updated_at"}
	menuItemColumnsWithoutDefault = []string{"id", "category_id", "name", "description", "status"}
	menuItemColumnsWithDefault    = []string{"created_at", "updated_at"}
	menuItemPrimaryKeyColumns     = []string{"id"}
	menuItemGeneratedColumns      = []string{}
)

type (
	// MenuItemSlice is an alias for a slice of pointers to MenuItem.
	// This should almost always be used instead of []MenuItem.
	MenuItemSlice []*MenuItem

	menuItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuItemType                 = reflect.TypeOf(&MenuItem{})
	menuItemMapping              = queries.MakeStructMapping(menuItemType)
	menuItemPrimaryKeyMapping, _ = queries.BindMapping(menuItemType, menuItemMapping, menuItemPrimaryKeyColumns)
	menuItemInsertCacheMut       sync.RWMutex
	menuItemInsertCache          = make(map[string]insertCache)
	menuItemUpdateCacheMut       sync.RWMutex
	menuItemUpdateCache          = make(map[string]updateCache)
	menuItemUpsertCacheMut       sync.RWMutex
	menuItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single menuItem record from the query.
func (q menuItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuItem, error) {
	o := &MenuItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for menu_items")
	}

	return o, nil
}

// All returns all MenuItem records from the query.
func (q menuItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuItemSlice, error) {
	var o []*MenuItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to MenuItem slice")
	}

	return o, nil
}

// Count returns the count of all MenuItem records in the query.
func (q menuItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count menu_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if menu_items exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *MenuItem) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// MenuItemOptions retrieves all the menu_item_option's MenuItemOptions with an executor.
func (o *MenuItem) MenuItemOptions(mods ...qm.QueryMod) menuItemOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_item_options\".\"menu_item_id\"=?", o.ID),
	)

	return MenuItemOptions(queryMods...)
}

// MenuItemPrices retrieves all the menu_item_price's MenuItemPrices with an executor.
func (o *MenuItem) MenuItemPrices(mods ...qm.QueryMod) menuItemPriceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_item_prices\".\"menu_item_id\"=?", o.ID),
	)

	return MenuItemPrices(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args[object.CategoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			args[obj.CategoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.MenuItems = append(foreign.R.MenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.MenuItems = append(foreign.R.MenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMenuItemOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuItemL) LoadMenuItemOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_item_options`),
		qm.WhereIn(`menu_item_options.menu_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_item_options")
	}

	var resultSlice []*MenuItemOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_item_options")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_item_options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_item_options")
	}

	if singular {
		object.R.MenuItemOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemOptionR{}
			}
			foreign.R.MenuItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MenuItemID {
				local.R.MenuItemOptions = append(local.R.MenuItemOptions, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemOptionR{}
				}
				foreign.R.MenuItem = local
				break
			}
		}
	}

	return nil
}

// LoadMenuItemPrices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuItemL) LoadMenuItemPrices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_item_prices`),
		qm.WhereIn(`menu_item_prices.menu_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_item_prices")
	}

	var resultSlice []*MenuItemPrice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_item_prices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_item_prices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_item_prices")
	}

	if singular {
		object.R.MenuItemPrices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemPriceR{}
			}
			foreign.R.MenuItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MenuItemID {
				local.R.MenuItemPrices = append(local.R.MenuItemPrices, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemPriceR{}
				}
				foreign.R.MenuItem = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the menuItem to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.MenuItems.
func (o *MenuItem) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &menuItemR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			MenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.MenuItems = append(related.R.MenuItems, o)
	}

	return nil
}

// AddMenuItemOptions adds the given related objects to the existing relationships
// of the menu_item, optionally inserting them as new records.
// Appends related to o.R.MenuItemOptions.
// Sets related.R.MenuItem appropriately.
func (o *MenuItem) AddMenuItemOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItemOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MenuItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_item_options\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menu_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MenuItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &menuItemR{
			MenuItemOptions: related,
		}
	} else {
		o.R.MenuItemOptions = append(o.R.MenuItemOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemOptionR{
				MenuItem: o,
			}
		} else {
			rel.R.MenuItem = o
		}
	}
	return nil
}

// AddMenuItemPrices adds the given related objects to the existing relationships
// of the menu_item, optionally inserting them as new records.
// Appends related to o.R.MenuItemPrices.
// Sets related.R.MenuItem appropriately.
func (o *MenuItem) AddMenuItemPrices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItemPrice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MenuItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_item_prices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menu_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPricePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MenuItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &menuItemR{
			MenuItemPrices: related,
		}
	} else {
		o.R.MenuItemPrices = append(o.R.MenuItemPrices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemPriceR{
				MenuItem: o,
			}
		} else {
			rel.R.MenuItem = o
		}
	}
	return nil
}

// MenuItems retrieves all the records using an executor.
func MenuItems(mods ...qm.QueryMod) menuItemQuery {
	mods = append(mods, qm.From("\"menu_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_items\".*"})
	}

	return menuItemQuery{q}
}

// FindMenuItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuItem(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MenuItem, error) {
	menuItemObj := &MenuItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, menuItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from menu_items")
	}

	return menuItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no menu_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuItemInsertCacheMut.RLock()
	cache, cached := menuItemInsertCache[key]
	menuItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into menu_items")
	}

	if !cached {
		menuItemInsertCacheMut.Lock()
		menuItemInsertCache[key] = cache
		menuItemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MenuItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	menuItemUpdateCacheMut.RLock()
	cache, cached := menuItemUpdateCache[key]
	menuItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update menu_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, append(wl, menuItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update menu_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for menu_items")
	}

	if !cached {
		menuItemUpdateCacheMut.Lock()
		menuItemUpdateCache[key] = cache
		menuItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q menuItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for menu_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all menuItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no menu_items provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuItemUpsertCacheMut.RLock()
	cache, cached := menuItemUpsertCache[key]
	menuItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert menu_items, could not build update column list")
		}

		ret := strmangle.SetComplement(menuItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(menuItemPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert menu_items, could not build conflict column list")
			}

			conflict = make([]string, len(menuItemPrimaryKeyColumns))
			copy(conflict, menuItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert menu_items")
	}

	if !cached {
		menuItemUpsertCacheMut.Lock()
		menuItemUpsertCache[key] = cache
		menuItemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MenuItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no MenuItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuItemPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no menuItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_items\".* FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in MenuItemSlice")
	}

	*o = slice

	return nil
}

// MenuItemExists checks if the MenuItem row exists.
func MenuItemExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if menu_items exists")
	}

	return exists, nil
}

// Exists checks if the MenuItem row exists.
func (o *MenuItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuItemExists(ctx, exec, o.ID)
}
