// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MenuItemOption is an object representing the database table.
type MenuItemOption struct {
	ID              int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	MenuItemID      int64             `boil:"menu_item_id" json:"menu_item_id" toml:"menu_item_id" yaml:"menu_item_id"`
	Name            string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	AdditionalPrice types.NullDecimal `boil:"additional_price" json:"additional_price,omitempty" toml:"additional_price" yaml:"additional_price,omitempty"`
	CreatedAt       time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *menuItemOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuItemOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuItemOptionColumns = struct {
	ID              string
	MenuItemID      string
	Name            string
	AdditionalPrice string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	MenuItemID:      "menu_item_id",
	Name:            "name",
	AdditionalPrice: "additional_price",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var MenuItemOptionTableColumns = struct {
	ID              string
	MenuItemID      string
	Name            string
	AdditionalPrice string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "menu_item_options.id",
	MenuItemID:      "menu_item_options.menu_item_id",
	Name:            "menu_item_options.name",
	AdditionalPrice: "menu_item_options.additional_price",
	CreatedAt:       "menu_item_options.created_at",
	UpdatedAt:       "menu_item_options.updated_at",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var MenuItemOptionWhere = struct {
	ID              whereHelperint64
	MenuItemID      whereHelperint64
	Name            whereHelperstring
	AdditionalPrice whereHelpertypes_NullDecimal
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint64{field: "\"menu_item_options\".\"id\""},
	MenuItemID:      whereHelperint64{field: "\"menu_item_options\".\"menu_item_id\""},
	Name:            whereHelperstring{field: "\"menu_item_options\".\"name\""},
	AdditionalPrice: whereHelpertypes_NullDecimal{field: "\"menu_item_options\".\"additional_price\""},
	CreatedAt:       whereHelpertime_Time{field: "\"menu_item_options\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"menu_item_options\".\"updated_at\""},
}

// MenuItemOptionRels is where relationship names are stored.
var MenuItemOptionRels = struct {
	MenuItem string
}{
	MenuItem: "MenuItem",
}

// menuItemOptionR is where relationships are stored.
type menuItemOptionR struct {
	MenuItem *MenuItem `boil:"MenuItem" json:"MenuItem" toml:"MenuItem" yaml:"MenuItem"`
}

// NewStruct creates a new relationship struct
func (*menuItemOptionR) NewStruct() *menuItemOptionR {
	return &menuItemOptionR{}
}

func (r *menuItemOptionR) GetMenuItem() *MenuItem {
	if r == nil {
		return nil
	}
	return r.MenuItem
}

// menuItemOptionL is where Load methods for each relationship are stored.
type menuItemOptionL struct{}

var (
	menuItemOptionAllColumns            = []string{"id", "menu_item_id", "name", "additional_price", "created_at", "updated_at"}
	menuItemOptionColumnsWithoutDefault = []string{"id", "menu_item_id", "name"}
	menuItemOptionColumnsWithDefault    = []string{"additional_price", "created_at", "updated_at"}
	menuItemOptionPrimaryKeyColumns     = []string{"id"}
	menuItemOptionGeneratedColumns      = []string{}
)

type (
	// MenuItemOptionSlice is an alias for a slice of pointers to MenuItemOption.
	// This should almost always be used instead of []MenuItemOption.
	MenuItemOptionSlice []*MenuItemOption

	menuItemOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuItemOptionType                 = reflect.TypeOf(&MenuItemOption{})
	menuItemOptionMapping              = queries.MakeStructMapping(menuItemOptionType)
	menuItemOptionPrimaryKeyMapping, _ = queries.BindMapping(menuItemOptionType, menuItemOptionMapping, menuItemOptionPrimaryKeyColumns)
	menuItemOptionInsertCacheMut       sync.RWMutex
	menuItemOptionInsertCache          = make(map[string]insertCache)
	menuItemOptionUpdateCacheMut       sync.RWMutex
	menuItemOptionUpdateCache          = make(map[string]updateCache)
	menuItemOptionUpsertCacheMut       sync.RWMutex
	menuItemOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single menuItemOption record from the query.
func (q menuItemOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuItemOption, error) {
	o := &MenuItemOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for menu_item_options")
	}

	return o, nil
}

// All returns all MenuItemOption records from the query.
func (q menuItemOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuItemOptionSlice, error) {
	var o []*MenuItemOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to MenuItemOption slice")
	}

	return o, nil
}

// Count returns the count of all MenuItemOption records in the query.
func (q menuItemOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count menu_item_options rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuItemOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if menu_item_options exists")
	}

	return count > 0, nil
}

// MenuItem pointed to by the foreign key.
func (o *MenuItemOption) MenuItem(mods ...qm.QueryMod) menuItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuItemID),
	}

	queryMods = append(queryMods, mods...)

	return MenuItems(queryMods...)
}

// LoadMenuItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemOptionL) LoadMenuItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItemOption interface{}, mods queries.Applicator) error {
	var slice []*MenuItemOption
	var object *MenuItemOption

	if singular {
		var ok bool
		object, ok = maybeMenuItemOption.(*MenuItemOption)
		if !ok {
			object = new(MenuItemOption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItemOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItemOption))
			}
		}
	} else {
		s, ok := maybeMenuItemOption.(*[]*MenuItemOption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItemOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItemOption))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemOptionR{}
		}
		args[object.MenuItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemOptionR{}
			}

			args[obj.MenuItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MenuItem")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MenuItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MenuItem = foreign
		if foreign.R == nil {
			foreign.R = &menuItemR{}
		}
		foreign.R.MenuItemOptions = append(foreign.R.MenuItemOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MenuItemID == foreign.ID {
				local.R.MenuItem = foreign
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.MenuItemOptions = append(foreign.R.MenuItemOptions, local)
				break
			}
		}
	}

	return nil
}

// SetMenuItem of the menuItemOption to the related item.
// Sets o.R.MenuItem to related.
// Adds o to related.R.MenuItemOptions.
func (o *MenuItemOption) SetMenuItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MenuItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MenuItemID = related.ID
	if o.R == nil {
		o.R = &menuItemOptionR{
			MenuItem: related,
		}
	} else {
		o.R.MenuItem = related
	}

	if related.R == nil {
		related.R = &menuItemR{
			MenuItemOptions: MenuItemOptionSlice{o},
		}
	} else {
		related.R.MenuItemOptions = append(related.R.MenuItemOptions, o)
	}

	return nil
}

// MenuItemOptions retrieves all the records using an executor.
func MenuItemOptions(mods ...qm.QueryMod) menuItemOptionQuery {
	mods = append(mods, qm.From("\"menu_item_options\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_item_options\".*"})
	}

	return menuItemOptionQuery{q}
}

// FindMenuItemOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuItemOption(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MenuItemOption, error) {
	menuItemOptionObj := &MenuItemOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_item_options\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, menuItemOptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from menu_item_options")
	}

	return menuItemOptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuItemOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no menu_item_options provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuItemOptionInsertCacheMut.RLock()
	cache, cached := menuItemOptionInsertCache[key]
	menuItemOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuItemOptionAllColumns,
			menuItemOptionColumnsWithDefault,
			menuItemOptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuItemOptionType, menuItemOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuItemOptionType, menuItemOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_item_options\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_item_options\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into menu_item_options")
	}

	if !cached {
		menuItemOptionInsertCacheMut.Lock()
		menuItemOptionInsertCache[key] = cache
		menuItemOptionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MenuItemOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuItemOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	menuItemOptionUpdateCacheMut.RLock()
	cache, cached := menuItemOptionUpdateCache[key]
	menuItemOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuItemOptionAllColumns,
			menuItemOptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update menu_item_options, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_item_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuItemOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuItemOptionType, menuItemOptionMapping, append(wl, menuItemOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update menu_item_options row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for menu_item_options")
	}

	if !cached {
		menuItemOptionUpdateCacheMut.Lock()
		menuItemOptionUpdateCache[key] = cache
		menuItemOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q menuItemOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for menu_item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for menu_item_options")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuItemOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuItemOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in menuItemOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all menuItemOption")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuItemOption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no menu_item_options provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuItemOptionUpsertCacheMut.RLock()
	cache, cached := menuItemOptionUpsertCache[key]
	menuItemOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			menuItemOptionAllColumns,
			menuItemOptionColumnsWithDefault,
			menuItemOptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuItemOptionAllColumns,
			menuItemOptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert menu_item_options, could not build update column list")
		}

		ret := strmangle.SetComplement(menuItemOptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(menuItemOptionPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert menu_item_options, could not build conflict column list")
			}

			conflict = make([]string, len(menuItemOptionPrimaryKeyColumns))
			copy(conflict, menuItemOptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_item_options\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(menuItemOptionType, menuItemOptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuItemOptionType, menuItemOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert menu_item_options")
	}

	if !cached {
		menuItemOptionUpsertCacheMut.Lock()
		menuItemOptionUpsertCache[key] = cache
		menuItemOptionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MenuItemOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuItemOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no MenuItemOption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuItemOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_item_options\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from menu_item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for menu_item_options")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuItemOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no menuItemOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from menu_item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for menu_item_options")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuItemOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_item_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from menuItemOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for menu_item_options")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuItemOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuItemOption(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuItemOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuItemOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_item_options\".* FROM \"menu_item_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in MenuItemOptionSlice")
	}

	*o = slice

	return nil
}

// MenuItemOptionExists checks if the MenuItemOption row exists.
func MenuItemOptionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_item_options\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if menu_item_options exists")
	}

	return exists, nil
}

// Exists checks if the MenuItemOption row exists.
func (o *MenuItemOption) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuItemOptionExists(ctx, exec, o.ID)
}
